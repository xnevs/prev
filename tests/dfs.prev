typ Node: rec {
  id: integer,
  num_edges: integer,
  edges: arr [20] integer,
  visited: logical
};

var n: integer;

var nodes: arr [20] Node;

fun dfs(node: ^Node): integer = (
  {if !(node^.visited) then (
    {node^.visited = true},
    {for i = 0, node^.num_edges, 1 :
      dfs(^(nodes[(node^).edges[i]]))
    } {where
        var i: integer
      }
  )},
  0
);

fun main(argc: integer): integer = (
  put_str('stevilo vozlisc: '),
  
  {n = get_int(0)},
  
  {for i = 0, n, 1: (
    {nodes[i].id = i},
    {nodes[i].visited = false}
  )},
  
  {for i = 0, n, 1: (
    put_str('vozlisce '),put_int(i), put_str(': '),put_nl(1),
    {m = get_int(0)},
    {nodes[i].num_edges = m},
    {for j = 0, m, 1: (
      {x = get_int(0)},
      {nodes[i].edges[j] = x}
    )} {where
         var x: integer
       }
  )} {where
       var m: integer;
       var j: integer
     },
  
  put_str('vpisi zacetno vozlisce:'), put_nl(1),
  {start_node = get_int(0)},
  dfs(^(nodes[start_node])),
  
  put_str('Iz vozlisca '),put_int(start_node),
  put_str(' so dosegljiva: '), put_nl(1),
  {for i = 0, n, 1:
    {if nodes[i].visited then (
      put_str('  '),
      put_int(i),
      put_nl(1)
    )}
  },
  0
) {where
    var start_node: integer;
    var i: integer
  }
